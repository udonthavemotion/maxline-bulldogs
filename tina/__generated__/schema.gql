# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  studs(relativePath: String): Studs!
  studsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: StudsFilter): StudsConnection!
  litters(relativePath: String): Litters!
  littersConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: LittersFilter): LittersConnection!
  photos(relativePath: String): Photos!
  photosConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PhotosFilter): PhotosConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  settings(relativePath: String): Settings!
  settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingsFilter): SettingsConnection!
}

input DocumentFilter {
  studs: StudsFilter
  litters: LittersFilter
  photos: PhotosFilter
  pages: PagesFilter
  settings: SettingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Studs | Litters | Photos | Pages | Settings | Folder

type StudsGallery {
  image: String!
  alt: String!
  caption: String
}

type StudsTraits {
  trait: String!
}

type StudsBreeding {
  bloodline: String
  registration: String
  healthClearances: String
  available: Boolean
  studFee: String
}

type Studs implements Node & Document {
  title: String!
  subtitle: String
  description: JSON
  heroImage: String
  gallery: [StudsGallery]
  traits: [StudsTraits]
  breeding: StudsBreeding
  inspiration: String
  category: String!
  order: Float
  featured: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input StudsGalleryFilter {
  image: ImageFilter
  alt: StringFilter
  caption: StringFilter
}

input StudsTraitsFilter {
  trait: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input StudsBreedingFilter {
  bloodline: StringFilter
  registration: StringFilter
  healthClearances: StringFilter
  available: BooleanFilter
  studFee: StringFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input StudsFilter {
  title: StringFilter
  subtitle: StringFilter
  description: RichTextFilter
  heroImage: ImageFilter
  gallery: StudsGalleryFilter
  traits: StudsTraitsFilter
  breeding: StudsBreedingFilter
  inspiration: StringFilter
  category: StringFilter
  order: NumberFilter
  featured: BooleanFilter
}

type StudsConnectionEdges {
  cursor: String!
  node: Studs
}

type StudsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [StudsConnectionEdges]
}

type LittersPuppies {
  name: String!
  gender: String!
  color: String
  price: String
  status: String!
  image: String
  notes: JSON
}

type LittersGallery {
  image: String!
  alt: String!
  caption: String
}

type Litters implements Node & Document {
  title: String!
  birthDate: String
  readyDate: String
  sire: String
  dam: String
  description: JSON
  puppies: [LittersPuppies]
  gallery: [LittersGallery]
  status: String!
  featured: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input LittersPuppiesFilter {
  name: StringFilter
  gender: StringFilter
  color: StringFilter
  price: StringFilter
  status: StringFilter
  image: ImageFilter
  notes: RichTextFilter
}

input LittersGalleryFilter {
  image: ImageFilter
  alt: StringFilter
  caption: StringFilter
}

input LittersFilter {
  title: StringFilter
  birthDate: DatetimeFilter
  readyDate: DatetimeFilter
  sire: StringFilter
  dam: StringFilter
  description: RichTextFilter
  puppies: LittersPuppiesFilter
  gallery: LittersGalleryFilter
  status: StringFilter
  featured: BooleanFilter
}

type LittersConnectionEdges {
  cursor: String!
  node: Litters
}

type LittersConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [LittersConnectionEdges]
}

type PhotosTags {
  tag: String!
}

type Photos implements Node & Document {
  title: String!
  image: String!
  alt: String!
  caption: String
  category: String!
  relatedTo: String
  dateTaken: String
  featured: Boolean
  tags: [PhotosTags]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PhotosTagsFilter {
  tag: StringFilter
}

input PhotosFilter {
  title: StringFilter
  image: ImageFilter
  alt: StringFilter
  caption: StringFilter
  category: StringFilter
  relatedTo: StringFilter
  dateTaken: DatetimeFilter
  featured: BooleanFilter
  tags: PhotosTagsFilter
}

type PhotosConnectionEdges {
  cursor: String!
  node: Photos
}

type PhotosConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PhotosConnectionEdges]
}

type PagesHero {
  title: String
  subtitle: String
  backgroundImage: String
  videoSrc: String
}

type PagesSections {
  type: String!
  title: String
  content: JSON
  data: String
}

type Pages implements Node & Document {
  title: String!
  description: String
  hero: PagesHero
  content: JSON
  sections: [PagesSections]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PagesHeroFilter {
  title: StringFilter
  subtitle: StringFilter
  backgroundImage: ImageFilter
  videoSrc: StringFilter
}

input PagesSectionsFilter {
  type: StringFilter
  title: StringFilter
  content: RichTextFilter
  data: StringFilter
}

input PagesFilter {
  title: StringFilter
  description: StringFilter
  hero: PagesHeroFilter
  content: RichTextFilter
  sections: PagesSectionsFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type SettingsSite {
  title: String!
  description: String!
  url: String
  logo: String
}

type SettingsContactSocial {
  instagram: String
  facebook: String
  youtube: String
}

type SettingsContact {
  phone: String
  email: String
  address: String
  social: SettingsContactSocial
}

type SettingsHorrorbullzCharacters {
  name: String!
  description: String
  image: String
  relatedColor: String
}

type SettingsHorrorbullz {
  title: String
  description: JSON
  characters: [SettingsHorrorbullzCharacters]
}

type Settings implements Node & Document {
  site: SettingsSite
  contact: SettingsContact
  horrorbullz: SettingsHorrorbullz
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SettingsSiteFilter {
  title: StringFilter
  description: StringFilter
  url: StringFilter
  logo: ImageFilter
}

input SettingsContactSocialFilter {
  instagram: StringFilter
  facebook: StringFilter
  youtube: StringFilter
}

input SettingsContactFilter {
  phone: StringFilter
  email: StringFilter
  address: StringFilter
  social: SettingsContactSocialFilter
}

input SettingsHorrorbullzCharactersFilter {
  name: StringFilter
  description: StringFilter
  image: ImageFilter
  relatedColor: StringFilter
}

input SettingsHorrorbullzFilter {
  title: StringFilter
  description: RichTextFilter
  characters: SettingsHorrorbullzCharactersFilter
}

input SettingsFilter {
  site: SettingsSiteFilter
  contact: SettingsContactFilter
  horrorbullz: SettingsHorrorbullzFilter
}

type SettingsConnectionEdges {
  cursor: String!
  node: Settings
}

type SettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateStuds(relativePath: String!, params: StudsMutation!): Studs!
  createStuds(relativePath: String!, params: StudsMutation!): Studs!
  updateLitters(relativePath: String!, params: LittersMutation!): Litters!
  createLitters(relativePath: String!, params: LittersMutation!): Litters!
  updatePhotos(relativePath: String!, params: PhotosMutation!): Photos!
  createPhotos(relativePath: String!, params: PhotosMutation!): Photos!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateSettings(relativePath: String!, params: SettingsMutation!): Settings!
  createSettings(relativePath: String!, params: SettingsMutation!): Settings!
}

input DocumentUpdateMutation {
  studs: StudsMutation
  litters: LittersMutation
  photos: PhotosMutation
  pages: PagesMutation
  settings: SettingsMutation
  relativePath: String
}

input DocumentMutation {
  studs: StudsMutation
  litters: LittersMutation
  photos: PhotosMutation
  pages: PagesMutation
  settings: SettingsMutation
}

input StudsGalleryMutation {
  image: String
  alt: String
  caption: String
}

input StudsTraitsMutation {
  trait: String
}

input StudsBreedingMutation {
  bloodline: String
  registration: String
  healthClearances: String
  available: Boolean
  studFee: String
}

input StudsMutation {
  title: String
  subtitle: String
  description: JSON
  heroImage: String
  gallery: [StudsGalleryMutation]
  traits: [StudsTraitsMutation]
  breeding: StudsBreedingMutation
  inspiration: String
  category: String
  order: Float
  featured: Boolean
}

input LittersPuppiesMutation {
  name: String
  gender: String
  color: String
  price: String
  status: String
  image: String
  notes: JSON
}

input LittersGalleryMutation {
  image: String
  alt: String
  caption: String
}

input LittersMutation {
  title: String
  birthDate: String
  readyDate: String
  sire: String
  dam: String
  description: JSON
  puppies: [LittersPuppiesMutation]
  gallery: [LittersGalleryMutation]
  status: String
  featured: Boolean
}

input PhotosTagsMutation {
  tag: String
}

input PhotosMutation {
  title: String
  image: String
  alt: String
  caption: String
  category: String
  relatedTo: String
  dateTaken: String
  featured: Boolean
  tags: [PhotosTagsMutation]
}

input PagesHeroMutation {
  title: String
  subtitle: String
  backgroundImage: String
  videoSrc: String
}

input PagesSectionsMutation {
  type: String
  title: String
  content: JSON
  data: String
}

input PagesMutation {
  title: String
  description: String
  hero: PagesHeroMutation
  content: JSON
  sections: [PagesSectionsMutation]
}

input SettingsSiteMutation {
  title: String
  description: String
  url: String
  logo: String
}

input SettingsContactSocialMutation {
  instagram: String
  facebook: String
  youtube: String
}

input SettingsContactMutation {
  phone: String
  email: String
  address: String
  social: SettingsContactSocialMutation
}

input SettingsHorrorbullzCharactersMutation {
  name: String
  description: String
  image: String
  relatedColor: String
}

input SettingsHorrorbullzMutation {
  title: String
  description: JSON
  characters: [SettingsHorrorbullzCharactersMutation]
}

input SettingsMutation {
  site: SettingsSiteMutation
  contact: SettingsContactMutation
  horrorbullz: SettingsHorrorbullzMutation
}

schema {
  query: Query
  mutation: Mutation
}
